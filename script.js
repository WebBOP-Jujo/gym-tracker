// --- SUPABASE CONFIGURATION ---
const SUPABASE_URL = 'https://zrkevddalzftfclnalke.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inpya2V2ZGRhbHpmdGZjbG5hbGtlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUyMzk3MDksImV4cCI6MjA2MDgxNTcwOX0.tfWBmpZCl59h_srKog4yjX85qzMPmW7q5mys4kaP1Ds';

// --- DEFAULT EXERCISES ---
const defaultExercises = [
    'Press Banca Plano', 'Press Banca Inclinado', 'Aperturas de Pecho',
    'Jalón al Pecho', 'Remo con Barra', 'Encogimientos con Mancuernas',
    'Prensa Pierna', 'Extensión de Cuádriceps', 'Curl Femoral',
    'Press Militar', 'Elevaciones Laterales', 'Extensión de Triceps con Cuerda',
    'Press Francés', 'Curl de Biceps con Barra', 'Curl Martillo'
];

// --- Initialize Supabase Client ---
let supabaseClient;
try {
    if (!SUPABASE_URL || !SUPABASE_ANON_KEY) { throw new Error("Configuración de Supabase incompleta."); }
    supabaseClient = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    if (!supabaseClient) { throw new Error("La creación del cliente Supabase falló."); }
} catch (error) {
    console.error("Error inicializando Supabase:", error);
    alert("Error de configuración: Revisa la consola para más detalles.");
    throw new Error("Supabase client could not be initialized.");
}

// --- GLOBAL STATE ---
let masterExerciseList = [];
let workoutHistory = {};
let loadedDatesSet = new Set();
let currentUser = null;
let chartInstance = null;
let exercisesWithHistory = new Set();

// --- DOM Elements ---
const authSection = document.getElementById('auth-section');
const appSection = document.getElementById('app-section');
const authEmailInput = document.getElementById('auth-email');
const authPasswordInput = document.getElementById('auth-password');
const loginBtn = document.getElementById('login-btn');
const signupBtn = document.getElementById('signup-btn');
const logoutBtn = document.getElementById('logout-btn');
const authError = document.getElementById('auth-error');
const workoutForm = document.getElementById('workout-form');
const workoutDateInput = document.getElementById('workout-date');
const exerciseSelect = document.getElementById('exercise');
const numSetsInput = document.getElementById('num-sets');
const setsContainer = document.getElementById('sets-container');
const addSetButton = document.getElementById('add-set-button');
const saveWorkoutButton = document.getElementById('save-workout-button');
const statusMessage = document.getElementById('status-message');
const toggleManageBtn = document.getElementById('toggle-manage-btn');
const exerciseManagementSection = document.getElementById('exercise-management-section');
const newExerciseInput = document.getElementById('new-exercise-name');
const addExerciseBtn = document.getElementById('add-exercise-btn');
const deleteExerciseSelect = document.getElementById('delete-exercise-select');
const deleteExerciseBtn = document.getElementById('delete-exercise-btn');
const manageExerciseStatus = document.getElementById('manage-exercise-status');
const historyLog = document.getElementById('history-log');
const historyCountSpan = document.getElementById('history-count');
const filterDateInput = document.getElementById('filter-date');
const showRecentBtn = document.getElementById('show-recent-btn');
const graphExerciseSelect = document.getElementById('graph-exercise-select');
const progressChartCanvas = document.getElementById('progress-chart')?.getContext('2d');
const chartStatus = document.getElementById('chart-status');
const chartContainer = document.querySelector('.chart-container');
const editModal = document.getElementById('edit-modal');
const editForm = document.getElementById('edit-form');
const editEntryIdInput = document.getElementById('edit-entry-id');
const editExerciseNameSpan = document.getElementById('edit-exercise-name');
const editDateSpan = document.getElementById('edit-date');
const editSetNumberSpan = document.getElementById('edit-set-number');
const editRepsInput = document.getElementById('edit-reps');
const editWeightInput = document.getElementById('edit-weight');
const saveEditBtn = document.getElementById('save-edit-btn');
const cancelEditBtns = document.querySelectorAll('.cancel-edit-btn, .close-modal-btn');
const editStatus = document.getElementById('edit-status');
const showSelectedGraphBtn = document.getElementById('show-selected-graph-btn');
const hideGraphBtn = document.getElementById('hide-graph-btn');

// --- HELPER FUNCTIONS ---
const showLoading = (button, isLoading) => { const spinner = button?.querySelector('.spinner'); if (!button) return; if (isLoading) { button.disabled = true; if (spinner) spinner.classList.remove('hidden'); } else { button.disabled = false; if (spinner) spinner.classList.add('hidden'); } };
const displayStatusMessage = (message, isError = false) => { if (!statusMessage) return; statusMessage.textContent = message; statusMessage.className = isError ? 'error-message' : 'success-message'; statusMessage.style.display = 'block'; setTimeout(() => { statusMessage.style.display = 'none'; statusMessage.textContent = ''; }, 5000); };
const displayInlineStatus = (element, message, isError = false) => { if (!element) return; element.textContent = message; element.className = `status-inline ${isError ? 'error-message' : 'success-message'}`; };
const formatDate = (date) => { if (!date) return ''; try { const d = new Date(date); if (isNaN(d.getTime())) { console.warn("Invalid date object received in formatDate:", date); return ''; } const day = String(d.getUTCDate()).padStart(2, '0'); const month = String(d.getUTCMonth() + 1).padStart(2, '0'); const year = d.getUTCFullYear(); return `${day}/${month}/${year}`; } catch (e) { console.error("Error formatting date:", e, "Input was:", date); return ''; } };
const parseDate = (dateString) => { if (!dateString || typeof dateString !== 'string') return null; const parts = dateString.split('/'); if (parts.length === 3) { const day = parseInt(parts[0], 10); const month = parseInt(parts[1], 10) - 1; const year = parseInt(parts[2], 10); if (year > 1000 && month >= 0 && month <= 11 && day >= 1 && day <= 31) { const date = new Date(Date.UTC(year, month, day)); if (!isNaN(date.getTime()) && date.getUTCDate() === day && date.getUTCMonth() === month && date.getUTCFullYear() === year) { return date; } } } console.warn("Failed to parse date string:", dateString); return null; };
const formatToInputDate = (dateString) => { const dateObj = parseDate(dateString); if (!dateObj) return ''; return dateObj.toISOString().split('T')[0]; };
const createSetRowHTML = (setNumber) => { return ` <div class="set-row" data-set-number="${setNumber}"> <div class="set-row-line-1"> <span class="set-number-label">Serie ${setNumber}:</span> <div class="set-input-group"> <label>Reps:</label> <input type="number" class="reps-input" placeholder="0" min="0" aria-label="Repeticiones Serie ${setNumber}"> </div> </div> <div class="set-row-line-2"> <div class="set-input-group"> <label>Peso:</label> <input type="number" class="weight-input" placeholder="0" step="0.01" min="0" aria-label="Peso Serie ${setNumber}"> <span>kg</span> </div> <button type="button" class="remove-set-btn" title="Quitar Serie ${setNumber}">×</button> </div> </div>`; };
const updateSetsUI = (numberOfSets) => { if (!setsContainer) return; const currentRows = setsContainer.querySelectorAll('.set-row'); const currentCount = currentRows.length; numberOfSets = Math.max(0, numberOfSets); if (numberOfSets > currentCount) { for (let i = currentCount + 1; i <= numberOfSets; i++) { setsContainer.insertAdjacentHTML('beforeend', createSetRowHTML(i)); } } else if (numberOfSets < currentCount) { for (let i = currentCount; i > numberOfSets; i--) { if (currentRows[i - 1]) { currentRows[i - 1].remove(); } } } renumberSetLabels(); };
const renumberSetLabels = () => { if (!setsContainer) return; const setRows = setsContainer.querySelectorAll('.set-row'); setRows.forEach((row, index) => { const setNumber = index + 1; row.dataset.setNumber = setNumber; const label = row.querySelector('.set-number-label'); const repsInput = row.querySelector('.reps-input'); const weightInput = row.querySelector('.weight-input'); const removeBtn = row.querySelector('.remove-set-btn'); if (label) label.textContent = `Serie ${setNumber}:`; if (repsInput) repsInput.setAttribute('aria-label', `Repeticiones Serie ${setNumber}`); if (weightInput) weightInput.setAttribute('aria-label', `Peso Serie ${setNumber}`); if (removeBtn) removeBtn.setAttribute('title', `Quitar Serie ${setNumber}`); }); if (numSetsInput) { numSetsInput.value = setRows.length; } };
const populateExerciseDropdowns = () => { masterExerciseList.sort((a, b) => a.nombre.localeCompare(b.nombre)); const exerciseOptionsHTML = masterExerciseList.map(ex => `<option value="${ex.nombre}">${ex.nombre}</option>`).join(''); if (exerciseSelect) { exerciseSelect.innerHTML = '<option value="" disabled selected>Selecciona...</option>' + exerciseOptionsHTML; } if (deleteExerciseSelect) { deleteExerciseSelect.innerHTML = '<option value="" disabled selected>Selecciona...</option>' + exerciseOptionsHTML; if (deleteExerciseBtn) deleteExerciseBtn.disabled = true; } };
const populateGraphExerciseDropdown = () => { exercisesWithHistory.clear(); Object.values(workoutHistory).flat().forEach(entry => { if (entry && entry.Exercise && entry.Weight != null && entry.Reps != null && entry.Reps > 0 && entry.Weight > 0) { exercisesWithHistory.add(entry.Exercise); } }); const sortedExercisesWithHistory = Array.from(exercisesWithHistory).sort(); const graphOptionsHTML = sortedExercisesWithHistory.map(exName => `<option value="${exName}">${exName}</option>`).join(''); if (graphExerciseSelect) { const currentSelection = graphExerciseSelect.value; graphExerciseSelect.innerHTML = '<option value="" disabled selected>Selecciona ejercicio...</option>' + graphOptionsHTML; if (sortedExercisesWithHistory.includes(currentSelection)) { graphExerciseSelect.value = currentSelection; } else { graphExerciseSelect.value = ""; hideChart(); } if (showSelectedGraphBtn) { showSelectedGraphBtn.disabled = sortedExercisesWithHistory.length === 0 || !graphExerciseSelect.value; } } console.log("Dropdown gráfica poblado con:", sortedExercisesWithHistory); };
const clearWorkoutForm = () => { if (workoutForm) workoutForm.reset(); if (workoutDateInput) { try { workoutDateInput.valueAsDate = new Date(); } catch (e) { workoutDateInput.value = new Date().toISOString().split('T')[0]; } } if (setsContainer) setsContainer.innerHTML = ''; if (numSetsInput) numSetsInput.value = 1; updateSetsUI(1); if (exerciseSelect) exerciseSelect.value = ""; if (manageExerciseStatus) manageExerciseStatus.textContent = ''; if (newExerciseInput) newExerciseInput.value = ''; if (deleteExerciseSelect) deleteExerciseSelect.value = ''; if (deleteExerciseBtn) deleteExerciseBtn.disabled = true; if (exerciseManagementSection) exerciseManagementSection.classList.add('hidden'); const toggleIcon = toggleManageBtn?.querySelector('i'); if (toggleIcon) toggleIcon.className = 'fas fa-list-ul'; if (saveWorkoutButton) { saveWorkoutButton.disabled = false; showLoading(saveWorkoutButton, false); } };
const calculateE1RM = (weight, reps) => { const numWeight = parseFloat(weight); const numReps = parseInt(reps, 10); if (!numWeight || !numReps || numReps < 1 || numWeight <= 0) { return 0; } if (numReps === 1) { return numWeight; } return numWeight * (1 + (numReps / 30)); };

// --- MOVED FUNCTION: Definición ANTES de ser llamada ---
/** Función auxiliar para actualizar dropdown y estado de la gráfica */
const updateGraphDropdownAndChart = async () => {
    // Repoblar dropdown con ejercicios que tienen datos válidos
    populateGraphExerciseDropdown();

    const selectedExercise = graphExerciseSelect?.value;

    // Si hay una gráfica mostrada y el ejercicio seleccionado ya no tiene datos (o no hay selección), ocultarla
    if (chartInstance && (!selectedExercise || !exercisesWithHistory.has(selectedExercise))) {
        hideChart();
    }
    // Si no hay selección o no hay ejercicios con datos, asegurar que el botón "Mostrar" esté deshabilitado
    if (showSelectedGraphBtn && graphExerciseSelect) {
         showSelectedGraphBtn.disabled = !selectedExercise || graphExerciseSelect?.options.length <= 1; // <=1 por la opción default
    }
};

// --- SUPABASE INTERACTIONS (Funciones Async) ---
const fetchMasterExerciseList = async () => { if (!currentUser || !supabaseClient) return []; try { const { data, error } = await supabaseClient.from('Ejercicios').select('id, nombre').order('nombre', { ascending: true }); if (error) { console.error('Error fetching exercise list:', error); if (error.code === '42P01') { displayStatusMessage("Error crítico: Falta tabla 'Ejercicios'.", true); } else { displayStatusMessage(`Error al cargar ejercicios: ${error.message}`, true); } masterExerciseList = []; } else { masterExerciseList = data || []; } populateExerciseDropdowns(); return masterExerciseList; } catch (error) { console.error('Fatal error fetching exercise list:', error); displayStatusMessage(`Error inesperado al cargar ejercicios: ${error.message}`, true); masterExerciseList = []; populateExerciseDropdowns(); return []; } };
const insertDefaultExercises = async () => { if (!currentUser || !currentUser.id || !supabaseClient) { console.error("No se puede insertar defaults: Usuario/cliente no válido."); return false; } console.log("Intentando insertar ejercicios por defecto para:", currentUser.id); const exercisesToInsert = defaultExercises.map(name => ({ nombre: name, user_id: currentUser.id })); try { const { error } = await supabaseClient.from('Ejercicios').insert(exercisesToInsert); if (error) { if (error.code === '23505') { console.warn("Ejercicios por defecto ya existen para este usuario."); return true; } else if (error.code === '42P01') { console.error("¡ERR CRÍTICO! Tabla 'Ejercicios' no existe al insertar defaults."); displayStatusMessage("Error: Tabla 'Ejercicios' no encontrada.", true); return false; } else if (error.code === '42501') { console.error("Error RLS al insertar ejercicios por defecto:", error.message); displayStatusMessage("Error de permisos al añadir ejercicios iniciales.", true); return false; } else { throw error; } } else { console.log("Ejercicios por defecto insertados correctamente."); return true; } } catch (error) { console.error("Error inesperado insertando ejercicios por defecto:", error); displayStatusMessage(`Error al insertar defaults: ${error.message}`, true); return false; } };
const addExerciseToDB = async (exerciseName) => { if (!currentUser || !exerciseName || !exerciseName.trim() || !supabaseClient) { displayInlineStatus(manageExerciseStatus, 'Nombre de ejercicio vacío.', true); return; } const trimmedName = exerciseName.trim(); const existingExercise = masterExerciseList.find(ex => ex.nombre.toLowerCase() === trimmedName.toLowerCase()); if (existingExercise) { displayInlineStatus(manageExerciseStatus, `'${trimmedName}' ya existe.`, true); return; } try { const { data, error } = await supabaseClient.from('Ejercicios').insert({ nombre: trimmedName, user_id: currentUser.id }).select('id, nombre').single(); if (error) { if (error.code === '23505') { displayInlineStatus(manageExerciseStatus, `'${trimmedName}' ya existe (DB).`, true); await fetchMasterExerciseList(); } else if (error.code === '42P01') { console.error("¡ERR CRÍTICO! Tabla 'Ejercicios' no existe al añadir."); displayInlineStatus(manageExerciseStatus, "Error: Tabla no encontrada.", true); } else if (error.code === '42501') { console.error("Error RLS al añadir ejercicio:", error.message); displayInlineStatus(manageExerciseStatus, "Error permisos.", true); } else { throw error; } } else if (data) { displayInlineStatus(manageExerciseStatus, `'${data.nombre}' añadido.`, false); if (newExerciseInput) newExerciseInput.value = ''; masterExerciseList.push(data); populateExerciseDropdowns(); } } catch (error) { console.error('Error adding exercise:', error); displayInlineStatus(manageExerciseStatus, `Error: ${error.message}`, true); } };
const deleteExerciseFromDB = async (exerciseNameToDelete) => { if (!currentUser || !exerciseNameToDelete || !supabaseClient) return; if (!confirm(`¿Seguro que quieres eliminar el ejercicio '${exerciseNameToDelete}'? Esta acción no se puede deshacer.`)) { return; } try { const { error } = await supabaseClient.from('Ejercicios').delete().eq('nombre', exerciseNameToDelete); if (error) { if (error.code === '42P01') { console.error("¡ERR CRÍTICO! Tabla 'Ejercicios' no existe al eliminar."); displayInlineStatus(manageExerciseStatus, "Error: Tabla no encontrada.", true); } else if (error.code === '42501') { console.error("Error RLS al eliminar ejercicio:", error.message); displayInlineStatus(manageExerciseStatus, "Error permisos.", true); } else { throw error; } } else { displayInlineStatus(manageExerciseStatus, `'${exerciseNameToDelete}' eliminado.`, false); masterExerciseList = masterExerciseList.filter(ex => ex.nombre !== exerciseNameToDelete); populateExerciseDropdowns(); await updateGraphDropdownAndChart(); /* Llamada AHORA es válida */ } } catch (error) { console.error('Error deleting exercise:', error); displayInlineStatus(manageExerciseStatus, `Error: ${error.message}`, true); } };
const fetchTotalWorkoutDays = async () => { if (!supabaseClient || !currentUser) return 0; try { const { data, error } = await supabaseClient.rpc('count_distinct_workout_days'); if (error) { console.error("Error llamando RPC count_distinct_workout_days:", error); if (error.code === '42883') { displayStatusMessage("Error: Función de conteo no encontrada en DB.", true); } return 0; } console.log("Total distinct workout days from DB:", data); return data ?? 0; } catch (rpcError) { console.error("Excepción llamando RPC count_distinct_workout_days:", rpcError); return 0; } };
const saveWorkoutToDB = async (workoutData) => { if (!currentUser || !workoutData || !workoutData.sets || workoutData.sets.length === 0 || !supabaseClient || !saveWorkoutButton) { displayStatusMessage('No hay datos válidos para guardar.', true); return; } showLoading(saveWorkoutButton, true); const workoutID = crypto.randomUUID(); const recordsToInsert = workoutData.sets.map(set => ({ "WorkoutID": workoutID, "Date": workoutData.date, "Exercise": workoutData.exercise, "SetNumber": set.setNumber, "Reps": set.reps ?? null, "Weight": set.weight ?? null, user_id: currentUser.id })); try { const { error } = await supabaseClient.from('Entrenamientos').insert(recordsToInsert); if (error) { console.error("Error guardando entrenamiento:", error); if (error.code === '42P01') { displayStatusMessage("Error crítico: Falta tabla 'Entrenamientos'.", true); } else if (error.code === '42501') { displayStatusMessage("Error permisos al guardar.", true); } else { displayStatusMessage(`Error al guardar: ${error.message}`, true); } } else { displayStatusMessage('Entrenamiento guardado correctamente.', false); clearWorkoutForm(); const totalDays = await fetchTotalWorkoutDays(); if (historyCountSpan) { historyCountSpan.textContent = `(Total: ${totalDays} días)`; } await fetchAndDisplayWorkoutHistory('recent'); } } catch (error) { console.error("Error inesperado guardando entrenamiento:", error); displayStatusMessage(`Error: ${error.message}`, true); } finally { showLoading(saveWorkoutButton, false); } };
const fetchAndDisplayWorkoutHistory = async (filterType = 'recent', specificDate = null) => { if (!currentUser || !supabaseClient) return; if (historyLog) historyLog.innerHTML = '<p>Cargando historial...</p>'; let query = supabaseClient.from('Entrenamientos').select('*').order('Timestamp', { ascending: false }); let isSpecificDateFilter = false; try { if (filterType === 'recent') { query = query.limit(50); } else if (filterType === 'specific' && specificDate) { isSpecificDateFilter = true; query = query.eq('Date', specificDate); } else { console.warn("Tipo de filtro inválido o fecha no proporcionada:", filterType, specificDate); if (historyLog) historyLog.innerHTML = '<p>Error de filtro.</p>'; return; } const { data, error } = await query; if (error) { console.error('Error fetching history:', error); displayStatusMessage(`Error al cargar historial: ${error.message}`, true); if (historyLog) historyLog.innerHTML = '<p>Error al cargar.</p>'; return; } processFetchedHistoryData(data || [], isSpecificDateFilter ? 'overwrite_specific' : 'append'); await updateGraphDropdownAndChart(); /* Llamada AHORA es válida */ if (filterType === 'recent') { displayWorkoutHistory(getRecentHistorySubset()); const totalDays = await fetchTotalWorkoutDays(); if (historyCountSpan) { historyCountSpan.textContent = `(Total: ${totalDays} días)`; } } else if (isSpecificDateFilter && specificDate) { displayWorkoutHistory(filterSpecificDate(specificDate)); if (historyCountSpan) { const countText = (workoutHistory[specificDate] && workoutHistory[specificDate].length > 0) ? `(${specificDate} - 1 día)` : `(${specificDate} - 0 días)`; historyCountSpan.textContent = countText; } } } catch (error) { console.error('Fatal error fetching history:', error); displayStatusMessage(`Error inesperado: ${error.message}`, true); if (historyLog) historyLog.innerHTML = '<p>Error fatal al cargar historial.</p>'; } };
const processFetchedHistoryData = (fetchedData, mode = 'append') => { if (!fetchedData) return; if (mode === 'overwrite_specific' && fetchedData.length > 0) { const dateKey = fetchedData[0].Date; if (dateKey) { workoutHistory[dateKey] = []; } } fetchedData.forEach(entry => { const dateKey = entry.Date; if (!dateKey) return; if (!workoutHistory[dateKey]) { workoutHistory[dateKey] = []; } const existingIndex = workoutHistory[dateKey].findIndex(existing => existing.id === entry.id); if (existingIndex === -1) { workoutHistory[dateKey].push(entry); } loadedDatesSet.add(dateKey); }); for (const dateKey in workoutHistory) { workoutHistory[dateKey].sort((a, b) => { const exA = a.Exercise || ''; const exB = b.Exercise || ''; const nameComparison = exA.toLowerCase().localeCompare(exB.toLowerCase()); if (nameComparison !== 0) { return nameComparison; } return (a.SetNumber || 0) - (b.SetNumber || 0); }); } };
const getRecentHistorySubset = (daysToShow = 7) => { const sortedDates = Object.keys(workoutHistory).sort((a, b) => { const dA = parseDate(a); const dB = parseDate(b); if (!dA && !dB) return 0; if (!dA) return 1; if (!dB) return -1; return dB - dA; }); const recentHistory = {}; let daysCount = 0; for (const date of sortedDates) { if (daysCount < daysToShow) { recentHistory[date] = workoutHistory[date]; daysCount++; } else { break; } } return recentHistory; };
const filterSpecificDate = (dateString) => { const filtered = {}; if (dateString && workoutHistory[dateString]) { filtered[dateString] = workoutHistory[dateString]; } return filtered; };
const deleteWorkoutEntry = async (workoutId) => { if (!currentUser || !workoutId || !supabaseClient) return; if (!confirm('¿Seguro que quieres eliminar todas las series de este entrenamiento?')) { return; } try { const { error } = await supabaseClient.from('Entrenamientos').delete().eq('WorkoutID', workoutId); if (error) { console.error('Error deleting workout entry:', error); if (error.code === '42501') { displayStatusMessage("Error permisos al eliminar.", true); } else { displayStatusMessage(`Error al eliminar: ${error.message}`, true); } return; } displayStatusMessage('Entrada de entrenamiento eliminada.', false); let dateKeyOfDeletedEntry = null; let dayBecameEmpty = false; Object.keys(workoutHistory).forEach(dateKey => { const initialLength = workoutHistory[dateKey].length; workoutHistory[dateKey] = workoutHistory[dateKey].filter(entry => { const keep = entry.WorkoutID !== workoutId; if (!keep) { dateKeyOfDeletedEntry = dateKey; } return keep; }); if (workoutHistory[dateKey].length === 0 && initialLength > 0) { delete workoutHistory[dateKey]; dayBecameEmpty = true; loadedDatesSet.delete(dateKey); } }); const currentFilterDateVal = filterDateInput?.value; const currentFormattedFilterDate = currentFilterDateVal ? formatDate(new Date(currentFilterDateVal + 'T00:00:00Z')) : null; const totalDays = await fetchTotalWorkoutDays(); if (currentFormattedFilterDate && currentFormattedFilterDate === dateKeyOfDeletedEntry) { displayWorkoutHistory(filterSpecificDate(currentFormattedFilterDate)); if (historyCountSpan) { const countText = dayBecameEmpty ? `(${currentFormattedFilterDate} - 0 días)` : workoutHistory[currentFormattedFilterDate] ? `(${currentFormattedFilterDate} - 1 día)` : `(${currentFormattedFilterDate} - 0 días)`; historyCountSpan.textContent = countText; } } else if (!currentFormattedFilterDate) { displayWorkoutHistory(getRecentHistorySubset()); if (historyCountSpan) { historyCountSpan.textContent = `(Total: ${totalDays} días)`; } } else { if (historyCountSpan) { historyCountSpan.textContent = `(Total: ${totalDays} días)`; } } await updateGraphDropdownAndChart(); /* Llamada AHORA es válida */ } catch (error) { console.error('Error inesperado eliminando entrada:', error); displayStatusMessage(`Error: ${error.message}`, true); } };
const updateWorkoutSetInDB = async (entryId, reps, weight) => { if (!currentUser || !entryId || !supabaseClient || !saveEditBtn) return; showLoading(saveEditBtn, true); if(editStatus) editStatus.textContent = ''; try { const { data, error } = await supabaseClient.from('Entrenamientos').update({ "Reps": reps ?? null, "Weight": weight ?? null }).eq('id', entryId).select().single(); if (error) { console.error("Error updating set:", error); if (error.code === '42501') { displayInlineStatus(editStatus, "Error permisos.", true); } else { displayInlineStatus(editStatus, `Error DB: ${error.message}`, true); } return; } if(editStatus) displayInlineStatus(editStatus, 'Serie actualizada.', false); let updatedLocally = false; let dateKeyOfUpdatedEntry = null; for (const dateKey in workoutHistory) { const entryIndex = workoutHistory[dateKey].findIndex(entry => entry.id === entryId); if (entryIndex > -1) { if (data) { workoutHistory[dateKey][entryIndex].Reps = data.Reps; workoutHistory[dateKey][entryIndex].Weight = data.Weight; } else { workoutHistory[dateKey][entryIndex].Reps = reps ?? null; workoutHistory[dateKey][entryIndex].Weight = weight ?? null; } updatedLocally = true; dateKeyOfUpdatedEntry = dateKey; break; } } if (updatedLocally) { const currentFilterDateVal = filterDateInput?.value; const currentFormattedFilterDate = currentFilterDateVal ? formatDate(new Date(currentFilterDateVal + 'T00:00:00Z')) : null; if (!currentFormattedFilterDate || currentFormattedFilterDate === dateKeyOfUpdatedEntry) { if (currentFormattedFilterDate) { displayWorkoutHistory(filterSpecificDate(currentFormattedFilterDate)); } else { displayWorkoutHistory(getRecentHistorySubset()); } } await updateGraphDropdownAndChart(); /* Llamada AHORA es válida */ } setTimeout(closeEditModal, 1000); } catch (error) { console.error('Error inesperado actualizando serie:', error); if (editStatus) displayInlineStatus(editStatus, `Error: ${error.message}`, true); } finally { showLoading(saveEditBtn, false); } };

// --- UI Update Functions ---
const displayWorkoutHistory = (historyDataToDisplay) => { if (!historyLog) return; historyLog.innerHTML = ''; const sortedDates = Object.keys(historyDataToDisplay).sort((a, b) => { const dA = parseDate(a); const dB = parseDate(b); if (!dA && !dB) return 0; if (!dA) return 1; if (!dB) return -1; return dB - dA; }); if (sortedDates.length === 0) { historyLog.innerHTML = '<p>No hay registros para mostrar.</p>'; return; } sortedDates.forEach(dateKey => { const entriesForDate = historyDataToDisplay[dateKey] || []; if (entriesForDate.length === 0) return; const entriesGroupedByWorkout = entriesForDate.reduce((acc, entry) => { if (!entry || !entry.WorkoutID) return acc; if (!acc[entry.WorkoutID]) { acc[entry.WorkoutID] = { exercise: entry.Exercise || 'Ejercicio Desconocido', date: entry.Date || 'Fecha Desconocida', sets: [] }; } acc[entry.WorkoutID].sets.push(entry); return acc; }, {}); const sortedWorkoutIDs = Object.keys(entriesGroupedByWorkout).sort((a, b) => { const exA = (entriesGroupedByWorkout[a]?.exercise || '').toLowerCase(); const exB = (entriesGroupedByWorkout[b]?.exercise || '').toLowerCase(); return exA.localeCompare(exB); }); const dateGroupDiv = document.createElement('div'); dateGroupDiv.className = 'history-date-group'; const dateHeader = document.createElement('h3'); dateHeader.className = 'history-date-header'; dateHeader.textContent = dateKey; dateGroupDiv.appendChild(dateHeader); sortedWorkoutIDs.forEach(workoutId => { const workout = entriesGroupedByWorkout[workoutId]; if (!workout) return; workout.sets.sort((a, b) => (a?.SetNumber || 0) - (b?.SetNumber || 0)); const entryDiv = document.createElement('div'); entryDiv.className = 'history-entry'; entryDiv.dataset.workoutId = workoutId; const exerciseNameSpan = document.createElement('span'); exerciseNameSpan.className = 'history-exercise-name'; exerciseNameSpan.textContent = workout.exercise; const deleteWorkoutBtn = document.createElement('button'); deleteWorkoutBtn.className = 'delete-entry-btn'; deleteWorkoutBtn.title = `Eliminar todas las series de ${workout.exercise} del ${workout.date}`; deleteWorkoutBtn.innerHTML = '<i class="fas fa-trash-alt"></i>'; deleteWorkoutBtn.onclick = () => deleteWorkoutEntry(workoutId); exerciseNameSpan.appendChild(deleteWorkoutBtn); entryDiv.appendChild(exerciseNameSpan); workout.sets.forEach(set => { if (!set) return; const setDetail = document.createElement('span'); setDetail.className = 'history-set-detail'; setDetail.innerHTML = ` S${set.SetNumber || '?'}: <strong>${set.Reps ?? 'N/A'}</strong>r → <strong>${set.Weight ?? 'N/A'}</strong>kg <span class="history-actions"> <button class="edit-entry-btn" data-entry-id="${set.id}" title="Editar Serie ${set.SetNumber || ''}"> <i class="fas fa-edit"></i> </button> </span>`; const editBtn = setDetail.querySelector('.edit-entry-btn'); if (editBtn) { editBtn.addEventListener('click', () => openEditModal(set)); } entryDiv.appendChild(setDetail); }); dateGroupDiv.appendChild(entryDiv); }); historyLog.appendChild(dateGroupDiv); }); };
const prefillFormBasedOnHistory = (exerciseName) => { if (!exerciseName || Object.keys(workoutHistory).length === 0) { if (numSetsInput) numSetsInput.value = 1; updateSetsUI(1); return; } let lastWorkoutSets = []; const sortedDates = Object.keys(workoutHistory).sort((a, b) => { const dA = parseDate(a); const dB = parseDate(b); if (!dA && !dB) return 0; if (!dA) return 1; if (!dB) return -1; return dB - dA; }); for (const date of sortedDates) { const entriesForDate = workoutHistory[date] || []; const workoutsOfExercise = entriesForDate.filter(entry => entry && entry.Exercise === exerciseName); if (workoutsOfExercise.length > 0) { const groupedByWorkout = workoutsOfExercise.reduce((acc, entry) => { if (!entry || !entry.WorkoutID) return acc; if (!acc[entry.WorkoutID]) acc[entry.WorkoutID] = []; acc[entry.WorkoutID].push(entry); return acc; }, {}); const workoutIDs = Object.keys(groupedByWorkout); if (workoutIDs.length > 0) { const lastWorkoutId = workoutIDs[workoutIDs.length - 1]; lastWorkoutSets = (groupedByWorkout[lastWorkoutId] || []).sort((a, b) => (a?.SetNumber || 0) - (b?.SetNumber || 0)); break; } } } if (lastWorkoutSets.length > 0) { if (numSetsInput) numSetsInput.value = lastWorkoutSets.length; updateSetsUI(lastWorkoutSets.length); const setRows = setsContainer?.querySelectorAll('.set-row'); setRows?.forEach((row, index) => { const setData = lastWorkoutSets[index]; if (setData) { const repsInput = row.querySelector('.reps-input'); const weightInput = row.querySelector('.weight-input'); if (repsInput) { repsInput.placeholder = setData.Reps ?? '0'; repsInput.value = ''; } if (weightInput) { weightInput.value = setData.Weight ?? ''; if (!weightInput.value) { weightInput.placeholder = '0'; } } } }); const firstRepsInput = setsContainer?.querySelector('.reps-input'); firstRepsInput?.focus(); } else { if (numSetsInput) numSetsInput.value = 1; updateSetsUI(1); } };
const openEditModal = (setEntry) => { if (!editModal || !setEntry) return; if (editEntryIdInput) editEntryIdInput.value = setEntry.id || ''; if (editExerciseNameSpan) editExerciseNameSpan.textContent = setEntry.Exercise || 'N/A'; if (editDateSpan) editDateSpan.textContent = setEntry.Date || 'N/A'; if (editSetNumberSpan) editSetNumberSpan.textContent = setEntry.SetNumber || 'N/A'; if (editRepsInput) editRepsInput.value = setEntry.Reps ?? ''; if (editWeightInput) editWeightInput.value = setEntry.Weight ?? ''; if (editStatus) editStatus.textContent = ''; if (saveEditBtn) showLoading(saveEditBtn, false); editModal.classList.remove('hidden'); editRepsInput?.focus(); };
const closeEditModal = () => { if (!editModal) return; editModal.classList.add('hidden'); if (editForm) editForm.reset(); if (editEntryIdInput) editEntryIdInput.value = ''; if (editStatus) editStatus.textContent = ''; };
const hideChart = () => { if (chartContainer) chartContainer.classList.add('hidden'); if (hideGraphBtn) hideGraphBtn.classList.add('hidden'); if (showSelectedGraphBtn) { showSelectedGraphBtn.classList.remove('hidden'); showSelectedGraphBtn.disabled = !graphExerciseSelect?.value || graphExerciseSelect?.options.length <= 1; } if(chartStatus) chartStatus.textContent = ''; if (chartInstance) { chartInstance.destroy(); chartInstance = null; } };

// --- Chart Functions ---
const updateChartData = async () => { if (!graphExerciseSelect || !chartStatus || !progressChartCanvas) { console.warn("Elementos necesarios para la gráfica no encontrados."); return; } const selectedExercise = graphExerciseSelect.value; if (!selectedExercise) { hideChart(); return; } chartStatus.textContent = 'Calculando datos...'; const dailyAvgE1RM = {}; for (const dateKey in workoutHistory) { const entriesForDate = workoutHistory[dateKey] || []; for (const entry of entriesForDate) { if (entry && entry.Exercise === selectedExercise && entry.Weight != null && entry.Reps != null && entry.Reps > 0 && entry.Weight > 0) { const e1RM = calculateE1RM(entry.Weight, entry.Reps); if (e1RM > 0) { const dateObj = parseDate(entry.Date); if (!dateObj) continue; const dateKeyISO = dateObj.toISOString().split('T')[0]; if (!dailyAvgE1RM[dateKeyISO]) { dailyAvgE1RM[dateKeyISO] = { totalE1RM: 0, count: 0 }; } dailyAvgE1RM[dateKeyISO].totalE1RM += e1RM; dailyAvgE1RM[dateKeyISO].count++; } } } } const sortedDatesISO = Object.keys(dailyAvgE1RM).sort(); if (sortedDatesISO.length === 0) { chartStatus.textContent = `No hay datos válidos para calcular e1RM para '${selectedExercise}'.`; if (chartInstance) { chartInstance.destroy(); chartInstance = null; } const ctx = progressChartCanvas; if (ctx) { ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); } return; } const labels = sortedDatesISO.map(dateISO => formatDate(dateISO)); const dataPoints = sortedDatesISO.map(dateISO => (dailyAvgE1RM[dateISO].totalE1RM / dailyAvgE1RM[dateISO].count).toFixed(1)); renderProgressChart(labels, dataPoints, selectedExercise); chartStatus.textContent = ''; };
const renderProgressChart = (labels, dataPoints, exerciseName) => { if (!progressChartCanvas) return; if (chartInstance) { chartInstance.destroy(); } chartInstance = new Chart(progressChartCanvas, { type: 'line', data: { labels: labels, datasets: [{ label: `e1RM Diario (${exerciseName})`, data: dataPoints, borderColor: '#3498db', backgroundColor: 'rgba(52, 152, 219, 0.1)', borderWidth: 2, tension: 0.1, pointBackgroundColor: '#3498db', pointRadius: 3, pointHoverRadius: 5 }] }, options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, title: { display: true, text: 'e1RM (kg)' } }, x: { title: { display: window.innerWidth > 600, text: 'Fecha' }, ticks: { maxRotation: 70, minRotation: 0, autoSkip: true, maxTicksLimit: 10 } } }, plugins: { legend: { position: 'top', labels: { boxWidth: 15, font: { size: 10 } } }, tooltip: { callbacks: { label: function(context) { let label = context.dataset.label || ''; if (label) { label = label.split('(')[0].trim() + ': '; } if (context.parsed.y !== null) { label += context.parsed.y + ' kg'; } return label; } } } } } }); };

// --- AUTHENTICATION ---
const handleAuthChange = (event, session) => { console.log("Evento Auth:", event, "| Sesión:", session ? session.user.email : 'No hay sesión'); switch (event) { case 'SIGNED_IN': if (session) { console.log("Usuario inició sesión:", session.user.email); currentUser = session.user; if (authSection) authSection.classList.add('hidden'); if (appSection) appSection.classList.remove('hidden'); if (authError) authError.textContent = ''; initializeAppData(); } break; case 'SIGNED_OUT': console.log("Usuario cerró sesión"); currentUser = null; if (authSection) authSection.classList.remove('hidden'); if (appSection) appSection.classList.add('hidden'); masterExerciseList = []; workoutHistory = {}; loadedDatesSet = new Set(); exercisesWithHistory.clear(); if (chartInstance) { chartInstance.destroy(); chartInstance = null; } if (historyLog) historyLog.innerHTML = ''; if (historyCountSpan) historyCountSpan.textContent = '(Total: 0 días)'; clearWorkoutForm(); populateExerciseDropdowns(); populateGraphExerciseDropdown(); hideChart(); if (filterDateInput) filterDateInput.value = ''; break; case 'INITIAL_SESSION': if (session) { console.log("Sesión inicial encontrada, esperando SIGNED_IN..."); } else { console.log("Sesión inicial: No hay usuario."); if (authSection) authSection.classList.remove('hidden'); if (appSection) appSection.classList.add('hidden'); } break; case 'USER_UPDATED': if (session) currentUser = session.user; console.log("Datos de usuario actualizados:", session?.user?.email); break; case 'PASSWORD_RECOVERY': console.log("Evento de recuperación de contraseña iniciado."); break; default: console.log("Evento de autenticación no manejado:", event); } };

// --- initializeAppData ---
const initializeAppData = async () => { if (!currentUser) { console.warn("Intento de inicializar datos sin usuario logueado."); return; } console.log("Inicializando datos de la app para:", currentUser.email); if (workoutDateInput) { try { workoutDateInput.valueAsDate = new Date(); } catch (e) { workoutDateInput.value = new Date().toISOString().split('T')[0]; } } if (filterDateInput) filterDateInput.value = ''; const totalDays = await fetchTotalWorkoutDays(); if (historyCountSpan) { historyCountSpan.textContent = `(Total: ${totalDays} días)`; } const currentExercises = await fetchMasterExerciseList(); if (currentExercises.length === 0 && currentUser && supabaseClient) { console.log("Lista de ejercicios vacía. Intentando insertar defaults..."); const defaultsInserted = await insertDefaultExercises(); if (defaultsInserted) { console.log("Defaults insertados, recargando lista..."); await fetchMasterExerciseList(); } } await fetchAndDisplayWorkoutHistory('recent'); updateSetsUI(1); hideChart(); console.log("Datos de la aplicación inicializados."); };

// --- EVENT LISTENERS ---
loginBtn?.addEventListener('click', async () => { if (!authEmailInput || !authPasswordInput || !supabaseClient) return; const email = authEmailInput.value; const password = authPasswordInput.value; if (authError) authError.textContent = ''; try { const { error } = await supabaseClient.auth.signInWithPassword({ email, password }); if (error) throw error; console.log("Intento de login OK para:", email); } catch (error) { console.error("Error en Login:", error); if (authError) authError.textContent = `Error: ${error.message}`; } });
signupBtn?.addEventListener('click', async () => { if (!authEmailInput || !authPasswordInput || !supabaseClient) return; const email = authEmailInput.value; const password = authPasswordInput.value; if (authError) authError.textContent = ''; try { const { error } = await supabaseClient.auth.signUp({ email, password }); if (error) throw error; alert('¡Registro exitoso! Revisa tu email para confirmar (si es necesario) e inicia sesión.'); console.log("Signup OK para:", email); authPasswordInput.value = ''; } catch (error) { console.error("Error en Signup:", error); if (authError) authError.textContent = `Error: ${error.message}`; } });
logoutBtn?.addEventListener('click', async () => { if (!supabaseClient) return; try { const { error } = await supabaseClient.auth.signOut(); if (error) throw error; console.log("Logout solicitado OK"); } catch (error) { console.error("Error en Logout:", error); alert(`Error al cerrar sesión: ${error.message}`); } });
numSetsInput?.addEventListener('input', (e) => { const numSets = Math.max(1, parseInt(e.target.value, 10) || 1); if (parseInt(e.target.value, 10) !== numSets) { e.target.value = numSets; } updateSetsUI(numSets); });
addSetButton?.addEventListener('click', () => { const currentSets = parseInt(numSetsInput?.value || '0', 10); const newCount = Math.max(1, currentSets + 1); if(numSetsInput) numSetsInput.value = newCount; updateSetsUI(newCount); });
setsContainer?.addEventListener('click', (e) => { const removeButton = e.target.closest('.remove-set-btn'); if (removeButton) { const setToRemove = removeButton.closest('.set-row'); if (setToRemove) { setToRemove.remove(); renumberSetLabels(); } } });
exerciseSelect?.addEventListener('change', (e) => { prefillFormBasedOnHistory(e.target.value); });
workoutForm?.addEventListener('submit', (e) => { e.preventDefault(); if (!workoutDateInput || !exerciseSelect || !setsContainer) return; const workoutData = { date: formatDate(new Date(workoutDateInput.value + 'T00:00:00Z')), exercise: exerciseSelect.value, sets: [] }; if (!workoutData.date) { displayStatusMessage('Fecha inválida.', true); workoutDateInput.focus(); return; } if (!workoutData.exercise) { displayStatusMessage('Selecciona un ejercicio.', true); exerciseSelect.focus(); return; } const setRows = setsContainer.querySelectorAll('.set-row'); if (setRows.length === 0) { displayStatusMessage('Añade al menos una serie.', true); return; } let isValid = true; setRows.forEach(row => { const repsInput = row.querySelector('.reps-input'); const weightInput = row.querySelector('.weight-input'); const setNumber = parseInt(row.dataset.setNumber, 10); const repsValue = repsInput?.value.trim(); const weightValue = weightInput?.value.trim(); const reps = (repsValue !== '' && !isNaN(parseInt(repsValue))) ? parseInt(repsValue) : null; const weight = (weightValue !== '' && !isNaN(parseFloat(weightValue))) ? parseFloat(weightValue) : null; if ((reps !== null && reps < 0) || (weight !== null && weight < 0)) { isValid = false; } workoutData.sets.push({ setNumber, reps, weight }); }); if (!isValid) { displayStatusMessage('Las repeticiones y el peso no pueden ser negativos.', true); return; } saveWorkoutToDB(workoutData); });
toggleManageBtn?.addEventListener('click', () => { if (!exerciseManagementSection || !toggleManageBtn) return; const section = exerciseManagementSection; const icon = toggleManageBtn.querySelector('i'); section.classList.toggle('hidden'); if (icon) { icon.className = section.classList.contains('hidden') ? 'fas fa-list-ul' : 'fas fa-eye-slash'; } if (section.classList.contains('hidden') && manageExerciseStatus) { manageExerciseStatus.textContent = ''; } });
addExerciseBtn?.addEventListener('click', () => { if (newExerciseInput) { addExerciseToDB(newExerciseInput.value); } });
newExerciseInput?.addEventListener('keypress', (e) => { if (e.key === 'Enter') { e.preventDefault(); addExerciseToDB(e.target.value); } });
deleteExerciseSelect?.addEventListener('change', (e) => { if(deleteExerciseBtn) deleteExerciseBtn.disabled = !e.target.value; });
deleteExerciseBtn?.addEventListener('click', () => { if(deleteExerciseSelect && deleteExerciseSelect.value) { deleteExerciseFromDB(deleteExerciseSelect.value); } });
filterDateInput?.addEventListener('change', (e) => { const selectedDateValue = e.target.value; if (selectedDateValue) { const dateObj = new Date(selectedDateValue + 'T00:00:00Z'); const formattedDate = formatDate(dateObj); if (formattedDate) { console.log(`Filtrando automáticamente por fecha: ${formattedDate}`); fetchAndDisplayWorkoutHistory('specific', formattedDate); hideChart(); } else { console.warn("La fecha seleccionada no pudo ser formateada:", selectedDateValue); displayStatusMessage("Formato de fecha inválido.", true); } } else { console.log("Fecha borrada, mostrando recientes."); showRecentBtn?.click(); } });
showRecentBtn?.addEventListener('click', async () => { if (filterDateInput) filterDateInput.value = ''; try { console.log("Botón 'Mostrar Recientes' pulsado. Obteniendo total..."); const totalDays = await fetchTotalWorkoutDays(); if (historyCountSpan) { historyCountSpan.textContent = `(Total: ${totalDays} días)`; } console.log("Contador total actualizado."); } catch (error) { console.error("Error obteniendo total de días al mostrar recientes:", error); if (historyCountSpan) { historyCountSpan.textContent = `(Total: Error)`; } } await fetchAndDisplayWorkoutHistory('recent'); hideChart(); });
showSelectedGraphBtn?.addEventListener('click', () => { const selectedExercise = graphExerciseSelect?.value; if (!selectedExercise) { displayStatusMessage("Selecciona un ejercicio para ver la gráfica.", true); return; } if (chartContainer && hideGraphBtn && showSelectedGraphBtn) { console.log(`Mostrando gráfica para ${selectedExercise}`); chartContainer.classList.remove('hidden'); hideGraphBtn.classList.remove('hidden'); showSelectedGraphBtn.classList.add('hidden'); updateChartData(); } });
hideGraphBtn?.addEventListener('click', () => { console.log("Ocultando gráfica"); hideChart(); });
graphExerciseSelect?.addEventListener('change', () => { console.log("Cambiada selección de ejercicio para gráfica"); hideChart(); if (showSelectedGraphBtn) { showSelectedGraphBtn.disabled = !graphExerciseSelect.value; } });
editForm?.addEventListener('submit', (e) => { e.preventDefault(); if (!editEntryIdInput || !editRepsInput || !editWeightInput) return; const entryId = parseInt(editEntryIdInput.value, 10); const repsValue = editRepsInput.value.trim(); const weightValue = editWeightInput.value.trim(); const reps = repsValue === '' ? null : parseInt(repsValue, 10); const weight = weightValue === '' ? null : parseFloat(weightValue); if (!entryId || isNaN(entryId)) { displayInlineStatus(editStatus, 'Error: ID de serie inválido.', true); return; } if ((reps !== null && (isNaN(reps) || reps < 0)) || (weight !== null && (isNaN(weight) || weight < 0))) { displayInlineStatus(editStatus, 'Valores de Reps/Peso inválidos o negativos.', true); return; } updateWorkoutSetInDB(entryId, reps, weight); });
cancelEditBtns?.forEach(btn => { btn.addEventListener('click', closeEditModal); });

// --- INICIALIZACIÓN AL CARGAR EL DOM ---
document.addEventListener('DOMContentLoaded', () => { console.log("DOM completamente cargado. Inicializando script..."); if (!supabaseClient) { console.error("¡FALLO CRÍTICO! El cliente Supabase no está definido. La aplicación no funcionará."); alert("Error crítico de inicialización. Revisa la consola."); if(appSection) appSection.innerHTML = '<p class="error-message">Error crítico al cargar la aplicación.</p>'; if(authSection) authSection.classList.add('hidden'); return; } if (!progressChartCanvas) { console.warn("Elemento Canvas para la gráfica (#progress-chart) no encontrado."); } console.log("Configurando listener onAuthStateChange..."); supabaseClient.auth.onAuthStateChange((event, session) => { handleAuthChange(event, session); }); supabaseClient.auth.getSession().then(({ data: { session } }) => { console.log("Comprobación inicial getSession:", session ? `Sesión encontrada para ${session.user.email}` : 'No se encontró sesión inicial'); if (!session) { if (authSection) authSection.classList.remove('hidden'); if (appSection) appSection.classList.add('hidden'); console.log("Mostrando sección de autenticación por falta de sesión inicial."); } }).catch(error => { console.error("Error durante la comprobación inicial getSession:", error); if (authSection) authSection.classList.remove('hidden'); if (appSection) appSection.classList.add('hidden'); }); console.log("Inicialización de listeners y comprobación de sesión completada. Esperando eventos..."); });